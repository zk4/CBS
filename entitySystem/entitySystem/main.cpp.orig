//
//  main.cpp
//  entitySystem
//
//  Created by ZK on 13-9-10.
//  Copyright (c) 2013å¹´ user. All rights reserved.
//

#include <iostream>
#include "Component.h"
#include "HpComponent.h"
#include "PackageComponent.h"
#include "HandComponent.h"
#include "AttackComponent.h"
#include "DefenseComponent.h"
#include "AllComponents.h"
#include "Logic.h"
#include "cJSON.h"
#include <fstream>
#include "Factory.h"
using namespace std;
int main(int argc, const char * argv[])
{


<<<<<<< Updated upstream
	ifstream is("component.json",  std::ios::binary  );
	if(is)
	{
=======
    Component* fighter2=new Component(FIGHTER);
    
	fighter2->AddComponent(new HpComponent(40,40));
	fighter2->AddComponent(new PackageComponent(3));
	fighter2->AddComponent(new DefenseComponent(3));
	fighter2->AddComponent(new HandComponent);
	fighter2->AddComponent(new HandComponent);
	fighter2->AddComponent(new AttackComponent(1220));
    
    Component* team =new Component(TEAM);
    team->AddComponent(new PackageComponent(5,TEAMPACKAGE));
    
    
    bool ret=Logic::TeamAdd(*team, *fighter);
    ret = Logic::TeamAdd(*team, *fighter2);
    
>>>>>>> Stashed changes

		if (is) {
			// get length of file:
			is.seekg (0, is.end);
			int length = is.tellg();
			is.seekg (0, is.beg);

			char * buffer = new char [length];

<<<<<<< Updated upstream
			std::cout << "Reading " << length << " characters... ";
			// read data as a block:
			is.read (buffer,length);

			if (is)
			{

				Component* entity=NULL;
				cJSON* root = cJSON_Parse (buffer);
				int size = cJSON_GetArraySize ( root );
=======
        
    
	Component* weapon=new Component(SWORD);
	weapon->AddComponent(new AttackComponent(4));
>>>>>>> Stashed changes

				cJSON* j_entity = cJSON_GetArrayItem ( root, 0 );
				Component* fighter=Factory::CreateComponent(j_entity);


				ReliveComponent* relive=new ReliveComponent();

				 j_entity = cJSON_GetArrayItem ( root, 1 );
				Component* defender=Factory::CreateComponent(j_entity);
				Logic::EquipSKill(*defender,*relive);




				//Logic::Equip(*fighter,*weapon,0);
				//Logic::Equip(*fighter,*defense,1);
				Logic::Attack(*fighter,*defender);
				cout<<Logic::GetHp(*defender)<<"\n";

				std::cout << "all characters read successfully.";}
			else
				std::cout << "error: only " << is.gcount() << " could be read";
			is.close();

			// ...buffer contains the entire file...

			delete[] buffer;
		}


	}
  
	//Component* defense=new Component("SHIELD");
 




	getchar();
	return 0;
}

